
PingPongGame.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000006  00800100  000005b4  00000648  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000005b4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000a  00800106  00800106  0000064e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000064e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000680  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000098  00000000  00000000  000006bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001115  00000000  00000000  00000754  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000879  00000000  00000000  00001869  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000647  00000000  00000000  000020e2  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001dc  00000000  00000000  0000272c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005e8  00000000  00000000  00002908  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000547  00000000  00000000  00002ef0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000088  00000000  00000000  00003437  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 38 00 	jmp	0x70	; 0x70 <__ctors_end>
   4:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
   8:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
   c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  10:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  14:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  18:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  1c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  20:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  24:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  28:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  2c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  30:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  34:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  38:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  3c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  40:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  44:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  48:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  4c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  50:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  54:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  58:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  5c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  60:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  64:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  68:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  6c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>

00000070 <__ctors_end>:
  70:	11 24       	eor	r1, r1
  72:	1f be       	out	0x3f, r1	; 63
  74:	cf ef       	ldi	r28, 0xFF	; 255
  76:	d4 e0       	ldi	r29, 0x04	; 4
  78:	de bf       	out	0x3e, r29	; 62
  7a:	cd bf       	out	0x3d, r28	; 61

0000007c <__do_clear_bss>:
  7c:	21 e0       	ldi	r18, 0x01	; 1
  7e:	a6 e0       	ldi	r26, 0x06	; 6
  80:	b1 e0       	ldi	r27, 0x01	; 1
  82:	01 c0       	rjmp	.+2      	; 0x86 <.do_clear_bss_start>

00000084 <.do_clear_bss_loop>:
  84:	1d 92       	st	X+, r1

00000086 <.do_clear_bss_start>:
  86:	a0 31       	cpi	r26, 0x10	; 16
  88:	b2 07       	cpc	r27, r18
  8a:	e1 f7       	brne	.-8      	; 0x84 <.do_clear_bss_loop>

0000008c <__do_copy_data>:
  8c:	11 e0       	ldi	r17, 0x01	; 1
  8e:	a0 e0       	ldi	r26, 0x00	; 0
  90:	b1 e0       	ldi	r27, 0x01	; 1
  92:	e4 eb       	ldi	r30, 0xB4	; 180
  94:	f5 e0       	ldi	r31, 0x05	; 5
  96:	02 c0       	rjmp	.+4      	; 0x9c <__do_copy_data+0x10>
  98:	05 90       	lpm	r0, Z+
  9a:	0d 92       	st	X+, r0
  9c:	a6 30       	cpi	r26, 0x06	; 6
  9e:	b1 07       	cpc	r27, r17
  a0:	d9 f7       	brne	.-10     	; 0x98 <__do_copy_data+0xc>
  a2:	0e 94 31 01 	call	0x262	; 0x262 <main>
  a6:	0c 94 d8 02 	jmp	0x5b0	; 0x5b0 <_exit>

000000aa <__bad_interrupt>:
  aa:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ae <USART_Transmit>:
		
		position.left = newValues.left_slider;
		position.right = newValues.right_slider;
		
		return position;
  ae:	5d 9b       	sbis	0x0b, 5	; 11
  b0:	fe cf       	rjmp	.-4      	; 0xae <USART_Transmit>
  b2:	8c b9       	out	0x0c, r24	; 12
  b4:	08 95       	ret

000000b6 <USART_Receive>:
  b6:	5f 9b       	sbis	0x0b, 7	; 11
  b8:	fe cf       	rjmp	.-4      	; 0xb6 <USART_Receive>
  ba:	8c b1       	in	r24, 0x0c	; 12
  bc:	08 95       	ret

000000be <USART_Init>:
  be:	90 bd       	out	0x20, r25	; 32
  c0:	89 b9       	out	0x09, r24	; 9
  c2:	88 e1       	ldi	r24, 0x18	; 24
  c4:	8a b9       	out	0x0a, r24	; 10
  c6:	8e e8       	ldi	r24, 0x8E	; 142
  c8:	80 bd       	out	0x20, r24	; 32
  ca:	08 95       	ret

000000cc <initPWM>:
  cc:	81 b3       	in	r24, 0x11	; 17
  ce:	80 61       	ori	r24, 0x10	; 16
  d0:	81 bb       	out	0x11, r24	; 17
  d2:	89 e6       	ldi	r24, 0x69	; 105
  d4:	83 bf       	out	0x33, r24	; 51
  d6:	eb e8       	ldi	r30, 0x8B	; 139
  d8:	f0 e0       	ldi	r31, 0x00	; 0
  da:	80 81       	ld	r24, Z
  dc:	82 68       	ori	r24, 0x82	; 130
  de:	80 83       	st	Z, r24
  e0:	ea e8       	ldi	r30, 0x8A	; 138
  e2:	f0 e0       	ldi	r31, 0x00	; 0
  e4:	80 81       	ld	r24, Z
  e6:	89 61       	ori	r24, 0x19	; 25
  e8:	80 83       	st	Z, r24
  ea:	85 e0       	ldi	r24, 0x05	; 5
  ec:	90 e0       	ldi	r25, 0x00	; 0
  ee:	90 93 81 00 	sts	0x0081, r25	; 0x800081 <__TEXT_REGION_LENGTH__+0x7fc081>
  f2:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7fc080>
  f6:	82 e0       	ldi	r24, 0x02	; 2
  f8:	90 e0       	ldi	r25, 0x00	; 0
  fa:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7fc087>
  fe:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7fc086>
 102:	08 95       	ret

00000104 <OLED_write_data>:

	
	
}

void OLED_write_data(uint8_t data){
 104:	cf 93       	push	r28
 106:	df 93       	push	r29
 108:	1f 92       	push	r1
 10a:	cd b7       	in	r28, 0x3d	; 61
 10c:	de b7       	in	r29, 0x3e	; 62
	volatile char *oled = (char *) 0x1200; // Start address for the ADC
	oled[0] = data;
 10e:	80 93 00 12 	sts	0x1200, r24	; 0x801200 <__bss_end+0x10f0>
	volatile uint8_t test = 0;
 112:	19 82       	std	Y+1, r1	; 0x01
	test = test + 2;
 114:	89 81       	ldd	r24, Y+1	; 0x01
 116:	8e 5f       	subi	r24, 0xFE	; 254
 118:	89 83       	std	Y+1, r24	; 0x01
}
 11a:	0f 90       	pop	r0
 11c:	df 91       	pop	r29
 11e:	cf 91       	pop	r28
 120:	08 95       	ret

00000122 <OLED_write_command>:

void OLED_write_command(uint8_t data){
 122:	cf 93       	push	r28
 124:	df 93       	push	r29
 126:	1f 92       	push	r1
 128:	cd b7       	in	r28, 0x3d	; 61
 12a:	de b7       	in	r29, 0x3e	; 62
	volatile char *oled = (char *) 0x1000; // Start address for the ADC
	oled[0] = data;
 12c:	80 93 00 10 	sts	0x1000, r24	; 0x801000 <__bss_end+0xef0>
	volatile uint8_t test = 0;
 130:	19 82       	std	Y+1, r1	; 0x01
	test = test + 2;
 132:	89 81       	ldd	r24, Y+1	; 0x01
 134:	8e 5f       	subi	r24, 0xFE	; 254
 136:	89 83       	std	Y+1, r24	; 0x01
}
 138:	0f 90       	pop	r0
 13a:	df 91       	pop	r29
 13c:	cf 91       	pop	r28
 13e:	08 95       	ret

00000140 <OLED_init>:
void OLED_init()
{
	OLED_write_command(0xae); // display off
 140:	8e ea       	ldi	r24, 0xAE	; 174
 142:	90 e0       	ldi	r25, 0x00	; 0
 144:	0e 94 91 00 	call	0x122	; 0x122 <OLED_write_command>
	OLED_write_command(0xa1); //segment remap
 148:	81 ea       	ldi	r24, 0xA1	; 161
 14a:	90 e0       	ldi	r25, 0x00	; 0
 14c:	0e 94 91 00 	call	0x122	; 0x122 <OLED_write_command>
	OLED_write_command(0xda); //common pads hardware: alternative
 150:	8a ed       	ldi	r24, 0xDA	; 218
 152:	90 e0       	ldi	r25, 0x00	; 0
 154:	0e 94 91 00 	call	0x122	; 0x122 <OLED_write_command>
	OLED_write_command(0x12);
 158:	82 e1       	ldi	r24, 0x12	; 18
 15a:	90 e0       	ldi	r25, 0x00	; 0
 15c:	0e 94 91 00 	call	0x122	; 0x122 <OLED_write_command>
	OLED_write_command(0xc8); //common output scan direction:com63~com0
 160:	88 ec       	ldi	r24, 0xC8	; 200
 162:	90 e0       	ldi	r25, 0x00	; 0
 164:	0e 94 91 00 	call	0x122	; 0x122 <OLED_write_command>
	OLED_write_command(0xa8); //multiplex ration mode:63
 168:	88 ea       	ldi	r24, 0xA8	; 168
 16a:	90 e0       	ldi	r25, 0x00	; 0
 16c:	0e 94 91 00 	call	0x122	; 0x122 <OLED_write_command>
	OLED_write_command(0x3f);
 170:	8f e3       	ldi	r24, 0x3F	; 63
 172:	90 e0       	ldi	r25, 0x00	; 0
 174:	0e 94 91 00 	call	0x122	; 0x122 <OLED_write_command>
	OLED_write_command(0xd5); //display divide ratio/osc. freq. mode
 178:	85 ed       	ldi	r24, 0xD5	; 213
 17a:	90 e0       	ldi	r25, 0x00	; 0
 17c:	0e 94 91 00 	call	0x122	; 0x122 <OLED_write_command>
	OLED_write_command(0x80);
 180:	80 e8       	ldi	r24, 0x80	; 128
 182:	90 e0       	ldi	r25, 0x00	; 0
 184:	0e 94 91 00 	call	0x122	; 0x122 <OLED_write_command>
	OLED_write_command(0x81); //contrast control
 188:	81 e8       	ldi	r24, 0x81	; 129
 18a:	90 e0       	ldi	r25, 0x00	; 0
 18c:	0e 94 91 00 	call	0x122	; 0x122 <OLED_write_command>
	OLED_write_command(0x50);
 190:	80 e5       	ldi	r24, 0x50	; 80
 192:	90 e0       	ldi	r25, 0x00	; 0
 194:	0e 94 91 00 	call	0x122	; 0x122 <OLED_write_command>
	OLED_write_command(0xd9); //set pre-charge period
 198:	89 ed       	ldi	r24, 0xD9	; 217
 19a:	90 e0       	ldi	r25, 0x00	; 0
 19c:	0e 94 91 00 	call	0x122	; 0x122 <OLED_write_command>
	OLED_write_command(0x21);
 1a0:	81 e2       	ldi	r24, 0x21	; 33
 1a2:	90 e0       	ldi	r25, 0x00	; 0
 1a4:	0e 94 91 00 	call	0x122	; 0x122 <OLED_write_command>
	OLED_write_command(0x20); //Set Memory Addressing Mode
 1a8:	80 e2       	ldi	r24, 0x20	; 32
 1aa:	90 e0       	ldi	r25, 0x00	; 0
 1ac:	0e 94 91 00 	call	0x122	; 0x122 <OLED_write_command>
	OLED_write_command(0x02);
 1b0:	82 e0       	ldi	r24, 0x02	; 2
 1b2:	90 e0       	ldi	r25, 0x00	; 0
 1b4:	0e 94 91 00 	call	0x122	; 0x122 <OLED_write_command>
	OLED_write_command(0xdb); //VCOM deselect level mode
 1b8:	8b ed       	ldi	r24, 0xDB	; 219
 1ba:	90 e0       	ldi	r25, 0x00	; 0
 1bc:	0e 94 91 00 	call	0x122	; 0x122 <OLED_write_command>
	OLED_write_command(0x30);
 1c0:	80 e3       	ldi	r24, 0x30	; 48
 1c2:	90 e0       	ldi	r25, 0x00	; 0
 1c4:	0e 94 91 00 	call	0x122	; 0x122 <OLED_write_command>
	OLED_write_command(0xad); //master configuration
 1c8:	8d ea       	ldi	r24, 0xAD	; 173
 1ca:	90 e0       	ldi	r25, 0x00	; 0
 1cc:	0e 94 91 00 	call	0x122	; 0x122 <OLED_write_command>
	OLED_write_command(0x00);
 1d0:	80 e0       	ldi	r24, 0x00	; 0
 1d2:	90 e0       	ldi	r25, 0x00	; 0
 1d4:	0e 94 91 00 	call	0x122	; 0x122 <OLED_write_command>
	OLED_write_command(0xa4); //out follows RAM content
 1d8:	84 ea       	ldi	r24, 0xA4	; 164
 1da:	90 e0       	ldi	r25, 0x00	; 0
 1dc:	0e 94 91 00 	call	0x122	; 0x122 <OLED_write_command>
	OLED_write_command(0xa6); //set normal display
 1e0:	86 ea       	ldi	r24, 0xA6	; 166
 1e2:	90 e0       	ldi	r25, 0x00	; 0
 1e4:	0e 94 91 00 	call	0x122	; 0x122 <OLED_write_command>
	OLED_write_command(0xaf); // display on
 1e8:	8f ea       	ldi	r24, 0xAF	; 175
 1ea:	90 e0       	ldi	r25, 0x00	; 0
 1ec:	0e 94 91 00 	call	0x122	; 0x122 <OLED_write_command>
	
	OLED_write_command(0x22);
 1f0:	82 e2       	ldi	r24, 0x22	; 34
 1f2:	90 e0       	ldi	r25, 0x00	; 0
 1f4:	0e 94 91 00 	call	0x122	; 0x122 <OLED_write_command>
	OLED_write_data(0x00);
 1f8:	80 e0       	ldi	r24, 0x00	; 0
 1fa:	90 e0       	ldi	r25, 0x00	; 0
 1fc:	0e 94 82 00 	call	0x104	; 0x104 <OLED_write_data>
	OLED_write_data(0x00);
 200:	80 e0       	ldi	r24, 0x00	; 0
 202:	90 e0       	ldi	r25, 0x00	; 0
 204:	0e 94 82 00 	call	0x104	; 0x104 <OLED_write_data>
	
	OLED_write_command(0x21);
 208:	81 e2       	ldi	r24, 0x21	; 33
 20a:	90 e0       	ldi	r25, 0x00	; 0
 20c:	0e 94 91 00 	call	0x122	; 0x122 <OLED_write_command>
	OLED_write_data(0x00);
 210:	80 e0       	ldi	r24, 0x00	; 0
 212:	90 e0       	ldi	r25, 0x00	; 0
 214:	0e 94 82 00 	call	0x104	; 0x104 <OLED_write_data>
	OLED_write_data(0x00);
 218:	80 e0       	ldi	r24, 0x00	; 0
 21a:	90 e0       	ldi	r25, 0x00	; 0
 21c:	0e 94 82 00 	call	0x104	; 0x104 <OLED_write_data>
	
	OLED_write_data(0xff);
 220:	8f ef       	ldi	r24, 0xFF	; 255
 222:	90 e0       	ldi	r25, 0x00	; 0
 224:	0e 94 82 00 	call	0x104	; 0x104 <OLED_write_data>
		OLED_write_data(0xff);
 228:	8f ef       	ldi	r24, 0xFF	; 255
 22a:	90 e0       	ldi	r25, 0x00	; 0
 22c:	0e 94 82 00 	call	0x104	; 0x104 <OLED_write_data>
	OLED_write_data(0xff);
 230:	8f ef       	ldi	r24, 0xFF	; 255
 232:	90 e0       	ldi	r25, 0x00	; 0
 234:	0e 94 82 00 	call	0x104	; 0x104 <OLED_write_data>
	OLED_write_data(0xff);
 238:	8f ef       	ldi	r24, 0xFF	; 255
 23a:	90 e0       	ldi	r25, 0x00	; 0
 23c:	0e 94 82 00 	call	0x104	; 0x104 <OLED_write_data>
	OLED_write_data(0xff);
 240:	8f ef       	ldi	r24, 0xFF	; 255
 242:	90 e0       	ldi	r25, 0x00	; 0
 244:	0e 94 82 00 	call	0x104	; 0x104 <OLED_write_data>
	OLED_write_data(0xff);
 248:	8f ef       	ldi	r24, 0xFF	; 255
 24a:	90 e0       	ldi	r25, 0x00	; 0
 24c:	0e 94 82 00 	call	0x104	; 0x104 <OLED_write_data>
	OLED_write_data(0xff);
 250:	8f ef       	ldi	r24, 0xFF	; 255
 252:	90 e0       	ldi	r25, 0x00	; 0
 254:	0e 94 82 00 	call	0x104	; 0x104 <OLED_write_data>
	OLED_write_command(0xa4);
 258:	84 ea       	ldi	r24, 0xA4	; 164
 25a:	90 e0       	ldi	r25, 0x00	; 0
 25c:	0e 94 91 00 	call	0x122	; 0x122 <OLED_write_command>
 260:	08 95       	ret

00000262 <main>:



void main( void )
{
	USART_Init ( MYUBRR );
 262:	8f e1       	ldi	r24, 0x1F	; 31
 264:	90 e0       	ldi	r25, 0x00	; 0
 266:	0e 94 5f 00 	call	0xbe	; 0xbe <USART_Init>
	fdevopen(USART_Transmit, USART_Receive);
 26a:	6b e5       	ldi	r22, 0x5B	; 91
 26c:	70 e0       	ldi	r23, 0x00	; 0
 26e:	87 e5       	ldi	r24, 0x57	; 87
 270:	90 e0       	ldi	r25, 0x00	; 0
 272:	0e 94 49 01 	call	0x292	; 0x292 <fdevopen>
	initPWM();
 276:	0e 94 66 00 	call	0xcc	; 0xcc <initPWM>
	
	
	MCUCR |= (1 << SRE);
 27a:	85 b7       	in	r24, 0x35	; 53
 27c:	80 68       	ori	r24, 0x80	; 128
 27e:	85 bf       	out	0x35, r24	; 53
	
	SFIOR &= ~(111 << XMM0);
 280:	80 b7       	in	r24, 0x30	; 48
 282:	87 78       	andi	r24, 0x87	; 135
 284:	80 bf       	out	0x30, r24	; 48
	SFIOR |= (1 << XMM2);
 286:	80 b7       	in	r24, 0x30	; 48
 288:	80 62       	ori	r24, 0x20	; 32
 28a:	80 bf       	out	0x30, r24	; 48
	
	OLED_init();
 28c:	0e 94 a0 00 	call	0x140	; 0x140 <OLED_init>
 290:	ff cf       	rjmp	.-2      	; 0x290 <main+0x2e>

00000292 <fdevopen>:
 292:	0f 93       	push	r16
 294:	1f 93       	push	r17
 296:	cf 93       	push	r28
 298:	df 93       	push	r29
 29a:	00 97       	sbiw	r24, 0x00	; 0
 29c:	31 f4       	brne	.+12     	; 0x2aa <fdevopen+0x18>
 29e:	61 15       	cp	r22, r1
 2a0:	71 05       	cpc	r23, r1
 2a2:	19 f4       	brne	.+6      	; 0x2aa <fdevopen+0x18>
 2a4:	80 e0       	ldi	r24, 0x00	; 0
 2a6:	90 e0       	ldi	r25, 0x00	; 0
 2a8:	3a c0       	rjmp	.+116    	; 0x31e <fdevopen+0x8c>
 2aa:	8b 01       	movw	r16, r22
 2ac:	ec 01       	movw	r28, r24
 2ae:	6e e0       	ldi	r22, 0x0E	; 14
 2b0:	70 e0       	ldi	r23, 0x00	; 0
 2b2:	81 e0       	ldi	r24, 0x01	; 1
 2b4:	90 e0       	ldi	r25, 0x00	; 0
 2b6:	0e 94 94 01 	call	0x328	; 0x328 <calloc>
 2ba:	fc 01       	movw	r30, r24
 2bc:	89 2b       	or	r24, r25
 2be:	91 f3       	breq	.-28     	; 0x2a4 <fdevopen+0x12>
 2c0:	80 e8       	ldi	r24, 0x80	; 128
 2c2:	83 83       	std	Z+3, r24	; 0x03
 2c4:	01 15       	cp	r16, r1
 2c6:	11 05       	cpc	r17, r1
 2c8:	71 f0       	breq	.+28     	; 0x2e6 <fdevopen+0x54>
 2ca:	13 87       	std	Z+11, r17	; 0x0b
 2cc:	02 87       	std	Z+10, r16	; 0x0a
 2ce:	81 e8       	ldi	r24, 0x81	; 129
 2d0:	83 83       	std	Z+3, r24	; 0x03
 2d2:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <__data_end>
 2d6:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <__data_end+0x1>
 2da:	89 2b       	or	r24, r25
 2dc:	21 f4       	brne	.+8      	; 0x2e6 <fdevopen+0x54>
 2de:	f0 93 07 01 	sts	0x0107, r31	; 0x800107 <__data_end+0x1>
 2e2:	e0 93 06 01 	sts	0x0106, r30	; 0x800106 <__data_end>
 2e6:	20 97       	sbiw	r28, 0x00	; 0
 2e8:	c9 f0       	breq	.+50     	; 0x31c <fdevopen+0x8a>
 2ea:	d1 87       	std	Z+9, r29	; 0x09
 2ec:	c0 87       	std	Z+8, r28	; 0x08
 2ee:	83 81       	ldd	r24, Z+3	; 0x03
 2f0:	82 60       	ori	r24, 0x02	; 2
 2f2:	83 83       	std	Z+3, r24	; 0x03
 2f4:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <__data_end+0x2>
 2f8:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <__data_end+0x3>
 2fc:	89 2b       	or	r24, r25
 2fe:	71 f4       	brne	.+28     	; 0x31c <fdevopen+0x8a>
 300:	f0 93 09 01 	sts	0x0109, r31	; 0x800109 <__data_end+0x3>
 304:	e0 93 08 01 	sts	0x0108, r30	; 0x800108 <__data_end+0x2>
 308:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <__data_end+0x4>
 30c:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <__data_end+0x5>
 310:	89 2b       	or	r24, r25
 312:	21 f4       	brne	.+8      	; 0x31c <fdevopen+0x8a>
 314:	f0 93 0b 01 	sts	0x010B, r31	; 0x80010b <__data_end+0x5>
 318:	e0 93 0a 01 	sts	0x010A, r30	; 0x80010a <__data_end+0x4>
 31c:	cf 01       	movw	r24, r30
 31e:	df 91       	pop	r29
 320:	cf 91       	pop	r28
 322:	1f 91       	pop	r17
 324:	0f 91       	pop	r16
 326:	08 95       	ret

00000328 <calloc>:
 328:	0f 93       	push	r16
 32a:	1f 93       	push	r17
 32c:	cf 93       	push	r28
 32e:	df 93       	push	r29
 330:	86 9f       	mul	r24, r22
 332:	80 01       	movw	r16, r0
 334:	87 9f       	mul	r24, r23
 336:	10 0d       	add	r17, r0
 338:	96 9f       	mul	r25, r22
 33a:	10 0d       	add	r17, r0
 33c:	11 24       	eor	r1, r1
 33e:	c8 01       	movw	r24, r16
 340:	0e 94 b0 01 	call	0x360	; 0x360 <malloc>
 344:	ec 01       	movw	r28, r24
 346:	00 97       	sbiw	r24, 0x00	; 0
 348:	29 f0       	breq	.+10     	; 0x354 <calloc+0x2c>
 34a:	a8 01       	movw	r20, r16
 34c:	60 e0       	ldi	r22, 0x00	; 0
 34e:	70 e0       	ldi	r23, 0x00	; 0
 350:	0e 94 d1 02 	call	0x5a2	; 0x5a2 <memset>
 354:	ce 01       	movw	r24, r28
 356:	df 91       	pop	r29
 358:	cf 91       	pop	r28
 35a:	1f 91       	pop	r17
 35c:	0f 91       	pop	r16
 35e:	08 95       	ret

00000360 <malloc>:
 360:	0f 93       	push	r16
 362:	1f 93       	push	r17
 364:	cf 93       	push	r28
 366:	df 93       	push	r29
 368:	82 30       	cpi	r24, 0x02	; 2
 36a:	91 05       	cpc	r25, r1
 36c:	10 f4       	brcc	.+4      	; 0x372 <malloc+0x12>
 36e:	82 e0       	ldi	r24, 0x02	; 2
 370:	90 e0       	ldi	r25, 0x00	; 0
 372:	e0 91 0e 01 	lds	r30, 0x010E	; 0x80010e <__flp>
 376:	f0 91 0f 01 	lds	r31, 0x010F	; 0x80010f <__flp+0x1>
 37a:	20 e0       	ldi	r18, 0x00	; 0
 37c:	30 e0       	ldi	r19, 0x00	; 0
 37e:	a0 e0       	ldi	r26, 0x00	; 0
 380:	b0 e0       	ldi	r27, 0x00	; 0
 382:	30 97       	sbiw	r30, 0x00	; 0
 384:	19 f1       	breq	.+70     	; 0x3cc <malloc+0x6c>
 386:	40 81       	ld	r20, Z
 388:	51 81       	ldd	r21, Z+1	; 0x01
 38a:	02 81       	ldd	r16, Z+2	; 0x02
 38c:	13 81       	ldd	r17, Z+3	; 0x03
 38e:	48 17       	cp	r20, r24
 390:	59 07       	cpc	r21, r25
 392:	c8 f0       	brcs	.+50     	; 0x3c6 <malloc+0x66>
 394:	84 17       	cp	r24, r20
 396:	95 07       	cpc	r25, r21
 398:	69 f4       	brne	.+26     	; 0x3b4 <malloc+0x54>
 39a:	10 97       	sbiw	r26, 0x00	; 0
 39c:	31 f0       	breq	.+12     	; 0x3aa <malloc+0x4a>
 39e:	12 96       	adiw	r26, 0x02	; 2
 3a0:	0c 93       	st	X, r16
 3a2:	12 97       	sbiw	r26, 0x02	; 2
 3a4:	13 96       	adiw	r26, 0x03	; 3
 3a6:	1c 93       	st	X, r17
 3a8:	27 c0       	rjmp	.+78     	; 0x3f8 <malloc+0x98>
 3aa:	00 93 0e 01 	sts	0x010E, r16	; 0x80010e <__flp>
 3ae:	10 93 0f 01 	sts	0x010F, r17	; 0x80010f <__flp+0x1>
 3b2:	22 c0       	rjmp	.+68     	; 0x3f8 <malloc+0x98>
 3b4:	21 15       	cp	r18, r1
 3b6:	31 05       	cpc	r19, r1
 3b8:	19 f0       	breq	.+6      	; 0x3c0 <malloc+0x60>
 3ba:	42 17       	cp	r20, r18
 3bc:	53 07       	cpc	r21, r19
 3be:	18 f4       	brcc	.+6      	; 0x3c6 <malloc+0x66>
 3c0:	9a 01       	movw	r18, r20
 3c2:	bd 01       	movw	r22, r26
 3c4:	ef 01       	movw	r28, r30
 3c6:	df 01       	movw	r26, r30
 3c8:	f8 01       	movw	r30, r16
 3ca:	db cf       	rjmp	.-74     	; 0x382 <malloc+0x22>
 3cc:	21 15       	cp	r18, r1
 3ce:	31 05       	cpc	r19, r1
 3d0:	f9 f0       	breq	.+62     	; 0x410 <__DATA_REGION_LENGTH__+0x10>
 3d2:	28 1b       	sub	r18, r24
 3d4:	39 0b       	sbc	r19, r25
 3d6:	24 30       	cpi	r18, 0x04	; 4
 3d8:	31 05       	cpc	r19, r1
 3da:	80 f4       	brcc	.+32     	; 0x3fc <malloc+0x9c>
 3dc:	8a 81       	ldd	r24, Y+2	; 0x02
 3de:	9b 81       	ldd	r25, Y+3	; 0x03
 3e0:	61 15       	cp	r22, r1
 3e2:	71 05       	cpc	r23, r1
 3e4:	21 f0       	breq	.+8      	; 0x3ee <malloc+0x8e>
 3e6:	fb 01       	movw	r30, r22
 3e8:	93 83       	std	Z+3, r25	; 0x03
 3ea:	82 83       	std	Z+2, r24	; 0x02
 3ec:	04 c0       	rjmp	.+8      	; 0x3f6 <malloc+0x96>
 3ee:	90 93 0f 01 	sts	0x010F, r25	; 0x80010f <__flp+0x1>
 3f2:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <__flp>
 3f6:	fe 01       	movw	r30, r28
 3f8:	32 96       	adiw	r30, 0x02	; 2
 3fa:	44 c0       	rjmp	.+136    	; 0x484 <__DATA_REGION_LENGTH__+0x84>
 3fc:	fe 01       	movw	r30, r28
 3fe:	e2 0f       	add	r30, r18
 400:	f3 1f       	adc	r31, r19
 402:	81 93       	st	Z+, r24
 404:	91 93       	st	Z+, r25
 406:	22 50       	subi	r18, 0x02	; 2
 408:	31 09       	sbc	r19, r1
 40a:	39 83       	std	Y+1, r19	; 0x01
 40c:	28 83       	st	Y, r18
 40e:	3a c0       	rjmp	.+116    	; 0x484 <__DATA_REGION_LENGTH__+0x84>
 410:	20 91 0c 01 	lds	r18, 0x010C	; 0x80010c <__brkval>
 414:	30 91 0d 01 	lds	r19, 0x010D	; 0x80010d <__brkval+0x1>
 418:	23 2b       	or	r18, r19
 41a:	41 f4       	brne	.+16     	; 0x42c <__DATA_REGION_LENGTH__+0x2c>
 41c:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
 420:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
 424:	30 93 0d 01 	sts	0x010D, r19	; 0x80010d <__brkval+0x1>
 428:	20 93 0c 01 	sts	0x010C, r18	; 0x80010c <__brkval>
 42c:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 430:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 434:	21 15       	cp	r18, r1
 436:	31 05       	cpc	r19, r1
 438:	41 f4       	brne	.+16     	; 0x44a <__DATA_REGION_LENGTH__+0x4a>
 43a:	2d b7       	in	r18, 0x3d	; 61
 43c:	3e b7       	in	r19, 0x3e	; 62
 43e:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
 442:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
 446:	24 1b       	sub	r18, r20
 448:	35 0b       	sbc	r19, r21
 44a:	e0 91 0c 01 	lds	r30, 0x010C	; 0x80010c <__brkval>
 44e:	f0 91 0d 01 	lds	r31, 0x010D	; 0x80010d <__brkval+0x1>
 452:	e2 17       	cp	r30, r18
 454:	f3 07       	cpc	r31, r19
 456:	a0 f4       	brcc	.+40     	; 0x480 <__DATA_REGION_LENGTH__+0x80>
 458:	2e 1b       	sub	r18, r30
 45a:	3f 0b       	sbc	r19, r31
 45c:	28 17       	cp	r18, r24
 45e:	39 07       	cpc	r19, r25
 460:	78 f0       	brcs	.+30     	; 0x480 <__DATA_REGION_LENGTH__+0x80>
 462:	ac 01       	movw	r20, r24
 464:	4e 5f       	subi	r20, 0xFE	; 254
 466:	5f 4f       	sbci	r21, 0xFF	; 255
 468:	24 17       	cp	r18, r20
 46a:	35 07       	cpc	r19, r21
 46c:	48 f0       	brcs	.+18     	; 0x480 <__DATA_REGION_LENGTH__+0x80>
 46e:	4e 0f       	add	r20, r30
 470:	5f 1f       	adc	r21, r31
 472:	50 93 0d 01 	sts	0x010D, r21	; 0x80010d <__brkval+0x1>
 476:	40 93 0c 01 	sts	0x010C, r20	; 0x80010c <__brkval>
 47a:	81 93       	st	Z+, r24
 47c:	91 93       	st	Z+, r25
 47e:	02 c0       	rjmp	.+4      	; 0x484 <__DATA_REGION_LENGTH__+0x84>
 480:	e0 e0       	ldi	r30, 0x00	; 0
 482:	f0 e0       	ldi	r31, 0x00	; 0
 484:	cf 01       	movw	r24, r30
 486:	df 91       	pop	r29
 488:	cf 91       	pop	r28
 48a:	1f 91       	pop	r17
 48c:	0f 91       	pop	r16
 48e:	08 95       	ret

00000490 <free>:
 490:	cf 93       	push	r28
 492:	df 93       	push	r29
 494:	00 97       	sbiw	r24, 0x00	; 0
 496:	09 f4       	brne	.+2      	; 0x49a <free+0xa>
 498:	81 c0       	rjmp	.+258    	; 0x59c <__stack+0x9d>
 49a:	fc 01       	movw	r30, r24
 49c:	32 97       	sbiw	r30, 0x02	; 2
 49e:	13 82       	std	Z+3, r1	; 0x03
 4a0:	12 82       	std	Z+2, r1	; 0x02
 4a2:	a0 91 0e 01 	lds	r26, 0x010E	; 0x80010e <__flp>
 4a6:	b0 91 0f 01 	lds	r27, 0x010F	; 0x80010f <__flp+0x1>
 4aa:	10 97       	sbiw	r26, 0x00	; 0
 4ac:	81 f4       	brne	.+32     	; 0x4ce <free+0x3e>
 4ae:	20 81       	ld	r18, Z
 4b0:	31 81       	ldd	r19, Z+1	; 0x01
 4b2:	82 0f       	add	r24, r18
 4b4:	93 1f       	adc	r25, r19
 4b6:	20 91 0c 01 	lds	r18, 0x010C	; 0x80010c <__brkval>
 4ba:	30 91 0d 01 	lds	r19, 0x010D	; 0x80010d <__brkval+0x1>
 4be:	28 17       	cp	r18, r24
 4c0:	39 07       	cpc	r19, r25
 4c2:	51 f5       	brne	.+84     	; 0x518 <__stack+0x19>
 4c4:	f0 93 0d 01 	sts	0x010D, r31	; 0x80010d <__brkval+0x1>
 4c8:	e0 93 0c 01 	sts	0x010C, r30	; 0x80010c <__brkval>
 4cc:	67 c0       	rjmp	.+206    	; 0x59c <__stack+0x9d>
 4ce:	ed 01       	movw	r28, r26
 4d0:	20 e0       	ldi	r18, 0x00	; 0
 4d2:	30 e0       	ldi	r19, 0x00	; 0
 4d4:	ce 17       	cp	r28, r30
 4d6:	df 07       	cpc	r29, r31
 4d8:	40 f4       	brcc	.+16     	; 0x4ea <free+0x5a>
 4da:	4a 81       	ldd	r20, Y+2	; 0x02
 4dc:	5b 81       	ldd	r21, Y+3	; 0x03
 4de:	9e 01       	movw	r18, r28
 4e0:	41 15       	cp	r20, r1
 4e2:	51 05       	cpc	r21, r1
 4e4:	f1 f0       	breq	.+60     	; 0x522 <__stack+0x23>
 4e6:	ea 01       	movw	r28, r20
 4e8:	f5 cf       	rjmp	.-22     	; 0x4d4 <free+0x44>
 4ea:	d3 83       	std	Z+3, r29	; 0x03
 4ec:	c2 83       	std	Z+2, r28	; 0x02
 4ee:	40 81       	ld	r20, Z
 4f0:	51 81       	ldd	r21, Z+1	; 0x01
 4f2:	84 0f       	add	r24, r20
 4f4:	95 1f       	adc	r25, r21
 4f6:	c8 17       	cp	r28, r24
 4f8:	d9 07       	cpc	r29, r25
 4fa:	59 f4       	brne	.+22     	; 0x512 <__stack+0x13>
 4fc:	88 81       	ld	r24, Y
 4fe:	99 81       	ldd	r25, Y+1	; 0x01
 500:	84 0f       	add	r24, r20
 502:	95 1f       	adc	r25, r21
 504:	02 96       	adiw	r24, 0x02	; 2
 506:	91 83       	std	Z+1, r25	; 0x01
 508:	80 83       	st	Z, r24
 50a:	8a 81       	ldd	r24, Y+2	; 0x02
 50c:	9b 81       	ldd	r25, Y+3	; 0x03
 50e:	93 83       	std	Z+3, r25	; 0x03
 510:	82 83       	std	Z+2, r24	; 0x02
 512:	21 15       	cp	r18, r1
 514:	31 05       	cpc	r19, r1
 516:	29 f4       	brne	.+10     	; 0x522 <__stack+0x23>
 518:	f0 93 0f 01 	sts	0x010F, r31	; 0x80010f <__flp+0x1>
 51c:	e0 93 0e 01 	sts	0x010E, r30	; 0x80010e <__flp>
 520:	3d c0       	rjmp	.+122    	; 0x59c <__stack+0x9d>
 522:	e9 01       	movw	r28, r18
 524:	fb 83       	std	Y+3, r31	; 0x03
 526:	ea 83       	std	Y+2, r30	; 0x02
 528:	49 91       	ld	r20, Y+
 52a:	59 91       	ld	r21, Y+
 52c:	c4 0f       	add	r28, r20
 52e:	d5 1f       	adc	r29, r21
 530:	ec 17       	cp	r30, r28
 532:	fd 07       	cpc	r31, r29
 534:	61 f4       	brne	.+24     	; 0x54e <__stack+0x4f>
 536:	80 81       	ld	r24, Z
 538:	91 81       	ldd	r25, Z+1	; 0x01
 53a:	84 0f       	add	r24, r20
 53c:	95 1f       	adc	r25, r21
 53e:	02 96       	adiw	r24, 0x02	; 2
 540:	e9 01       	movw	r28, r18
 542:	99 83       	std	Y+1, r25	; 0x01
 544:	88 83       	st	Y, r24
 546:	82 81       	ldd	r24, Z+2	; 0x02
 548:	93 81       	ldd	r25, Z+3	; 0x03
 54a:	9b 83       	std	Y+3, r25	; 0x03
 54c:	8a 83       	std	Y+2, r24	; 0x02
 54e:	e0 e0       	ldi	r30, 0x00	; 0
 550:	f0 e0       	ldi	r31, 0x00	; 0
 552:	12 96       	adiw	r26, 0x02	; 2
 554:	8d 91       	ld	r24, X+
 556:	9c 91       	ld	r25, X
 558:	13 97       	sbiw	r26, 0x03	; 3
 55a:	00 97       	sbiw	r24, 0x00	; 0
 55c:	19 f0       	breq	.+6      	; 0x564 <__stack+0x65>
 55e:	fd 01       	movw	r30, r26
 560:	dc 01       	movw	r26, r24
 562:	f7 cf       	rjmp	.-18     	; 0x552 <__stack+0x53>
 564:	8d 91       	ld	r24, X+
 566:	9c 91       	ld	r25, X
 568:	11 97       	sbiw	r26, 0x01	; 1
 56a:	9d 01       	movw	r18, r26
 56c:	2e 5f       	subi	r18, 0xFE	; 254
 56e:	3f 4f       	sbci	r19, 0xFF	; 255
 570:	82 0f       	add	r24, r18
 572:	93 1f       	adc	r25, r19
 574:	20 91 0c 01 	lds	r18, 0x010C	; 0x80010c <__brkval>
 578:	30 91 0d 01 	lds	r19, 0x010D	; 0x80010d <__brkval+0x1>
 57c:	28 17       	cp	r18, r24
 57e:	39 07       	cpc	r19, r25
 580:	69 f4       	brne	.+26     	; 0x59c <__stack+0x9d>
 582:	30 97       	sbiw	r30, 0x00	; 0
 584:	29 f4       	brne	.+10     	; 0x590 <__stack+0x91>
 586:	10 92 0f 01 	sts	0x010F, r1	; 0x80010f <__flp+0x1>
 58a:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <__flp>
 58e:	02 c0       	rjmp	.+4      	; 0x594 <__stack+0x95>
 590:	13 82       	std	Z+3, r1	; 0x03
 592:	12 82       	std	Z+2, r1	; 0x02
 594:	b0 93 0d 01 	sts	0x010D, r27	; 0x80010d <__brkval+0x1>
 598:	a0 93 0c 01 	sts	0x010C, r26	; 0x80010c <__brkval>
 59c:	df 91       	pop	r29
 59e:	cf 91       	pop	r28
 5a0:	08 95       	ret

000005a2 <memset>:
 5a2:	dc 01       	movw	r26, r24
 5a4:	01 c0       	rjmp	.+2      	; 0x5a8 <memset+0x6>
 5a6:	6d 93       	st	X+, r22
 5a8:	41 50       	subi	r20, 0x01	; 1
 5aa:	50 40       	sbci	r21, 0x00	; 0
 5ac:	e0 f7       	brcc	.-8      	; 0x5a6 <memset+0x4>
 5ae:	08 95       	ret

000005b0 <_exit>:
 5b0:	f8 94       	cli

000005b2 <__stop_program>:
 5b2:	ff cf       	rjmp	.-2      	; 0x5b2 <__stop_program>
